<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/12/hello-world/"/>
      <url>/2021/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块系统与Node.js模块系统比较</title>
      <link href="/2021/08/06/ES6%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E4%B8%8ENode-js%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E6%AF%94%E8%BE%83/"/>
      <url>/2021/08/06/ES6%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E4%B8%8ENode-js%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p><img src="../images/13-ES6%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E5%92%8CNodejs%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.png" alt="ES6模块系统和Nodejs模块系统.png"></p><h1 id="一、区分"><a href="#一、区分" class="headerlink" title="一、区分"></a>一、区分</h1><pre><code>1. import命令会被 JavaScript 引擎静态分析，先于模块内的其他模块执行（叫做”连接“更合适）。2. import()函数，完成动态加载，异步加载。import()类似于 Node 的require方法，区别主要是前者import是异步加载，    后者require是同步加载。  ES6 import()返回一个 Promise 对象。3. require是运行时加载模块，只有运行时才知道,同步加载。CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。数据动态更新。CommonJS和AMD模块，都只能在运行时确定这些东西。CommonJS模块输出的是值的缓存，不存在动态更新。比如，CommonJS模块就是对象，输入时必须查找对象属性。Node遵循CommonJS规范。</code></pre><h1 id="二、ES6模块"><a href="#二、ES6模块" class="headerlink" title="二、ES6模块"></a>二、ES6模块</h1><h2 id="1-基本的导出"><a href="#1-基本的导出" class="headerlink" title="1.基本的导出"></a>1.基本的导出</h2><pre><code>(1) 可以在变量、函数、类定义前加export(2) 可以在代码的尾部 export &#123; 变量/函数/类的名称 &#125;</code></pre><h2 id="2-基本的导入"><a href="#2-基本的导入" class="headerlink" title="2.基本的导入"></a>2.基本的导入</h2><pre><code>(1) 在其它模块内使用import关键字来访问已被导出的功能。(2) 导入单个绑定： import &#123; identifier1 &#125; from &quot;./example.js&quot;;(3) 导入多个绑定： import &#123; identifier1, identifier2 &#125; from &quot;./example.js&quot;;(4) 导入整个模块： import * as example from &quot;./example.js&quot;;导入绑定的一个怪异点：外部模块导入的name变量与在example.js模块内部的name变量对比， 前者是对于后者的只读引用，会始终反映出后者的变化。</code></pre><h2 id="3-重命名的导入与导出"><a href="#3-重命名的导入与导出" class="headerlink" title="3.重命名的导入与导出"></a>3.重命名的导入与导出</h2><pre><code>你可能并不想使用从模块中导出的变量、函数或类的原始名称。可以在导入或导出的过程中进行修改。(1) export &#123; sum as add &#125;(2) import &#123; sum as add &#125; from &quot;./example.js&quot;</code></pre><h2 id="4-导出默认值"><a href="#4-导出默认值" class="headerlink" title="4.导出默认值"></a>4.导出默认值</h2><pre><code>(1)  export default function(num1, num2) &#123;return num1+num2&#125;;(2)  export sum default(3)  export &#123;sum as default&#125;;  //使用重命名的语法导出默认值</code></pre><h2 id="5-导入默认值"><a href="#5-导入默认值" class="headerlink" title="5.导入默认值"></a>5.导入默认值</h2><pre><code>(1) import sum, &#123; color &#125; from &quot;./example.js&quot;;  //默认名称与非默认名称分开，默认名称在非默认名称之前。(2) import &#123; default as sum, color &#125; from &quot;example&quot;; //默认的导出default 被重命名为 sum</code></pre><h2 id="6-绑定的再导出"><a href="#6-绑定的再导出" class="headerlink" title="6.绑定的再导出"></a>6.绑定的再导出</h2><pre><code>也许有时你会想将当前模块已导入的内容重新再导出(1) import &#123; sum &#125; from &quot;./example.js&quot;;    export &#123; sum &#125;(2) export &#123; sum &#125; from &quot;./example.js&quot;;</code></pre><h2 id="7-无绑定的导入"><a href="#7-无绑定的导入" class="headerlink" title="7.无绑定的导入"></a>7.无绑定的导入</h2><pre><code>有些模块也许没有进行任何导出，相反只是修改全局作用域的对象。对于这些对象的修改会反映到其他模块中。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* example.js */</span></span><br><span class="line"><span class="comment">// 没有导出与导入的模块</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.pushAll = <span class="function"><span class="keyword">function</span>(<span class="params">items</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//items 必须是一个数组</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(items)) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Argument must be an array.&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//使用内置的 push() 与扩展运算符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.push(...items);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./example.js&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> items = [];</span><br><span class="line">items.pushAll(colors);</span><br></pre></td></tr></table></figure><h1 id="三、Node-js模块"><a href="#三、Node-js模块" class="headerlink" title="三、Node.js模块"></a>三、Node.js模块</h1><h2 id="1-Node-js-提供了-exports-和-require-两个对象，"><a href="#1-Node-js-提供了-exports-和-require-两个对象，" class="headerlink" title="1.Node.js 提供了 exports 和 require 两个对象，"></a>1.Node.js 提供了 exports 和 require 两个对象，</h2><pre><code>其中 exports 是模块公开的接口， require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module.js</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="built_in">exports</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">  name = thyName;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//getmodule.js</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./module&#x27;</span>);</span><br><span class="line">myModule.setName(<span class="string">&#x27;BYVoid&#x27;</span>);</span><br><span class="line">myModule.sayHello();</span><br></pre></td></tr></table></figure><h2 id="2-覆盖-exports"><a href="#2-覆盖-exports" class="headerlink" title="2.覆盖 exports"></a>2.覆盖 exports</h2><pre><code>有时候我们只是想把一个对象封装到模块中</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hello.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line">  <span class="built_in">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">    name = thyName;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = Hello;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//gethello.js</span></span><br><span class="line"><span class="keyword">var</span> Hello = <span class="built_in">require</span>(<span class="string">&#x27;./hello&#x27;</span>);</span><br><span class="line">hello = <span class="keyword">new</span> Hello();</span><br><span class="line">hello.setName(<span class="string">&#x27;BYVoid&#x27;</span>);</span><br><span class="line">hello.sayHello();</span><br></pre></td></tr></table></figure><pre><code>注意，模块接口的唯一变化是使用 module.exports = Hello 代替了 exports.Hello=Hello。    在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的exports。事实上， exports 本身仅仅是一个普通的空对象，即 &#123;&#125;，它专门用来声明接口，本质上是通过它为模块闭包的内部建立了一个有限的访问接口。    因为它没有任何特殊的地方，所以可以用其他东西来代替，譬如我们上面例子中的 Hello 对象。</code></pre><h2 id="3-exports-和-module-exports-的区别了："><a href="#3-exports-和-module-exports-的区别了：" class="headerlink" title="3.  exports 和 module.exports 的区别了："></a>3.  exports 和 module.exports 的区别了：</h2><pre><code>(1) module.exports 初始值为一个空对象 &#123;&#125;(2) exports 是指向的 module.exports 的引用（不要修改指向，因为模块导出的module.exports）(3) require() 返回的是 module.exports 而不是 exports</code></pre><h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><pre><code>(1) 对于要导出的属性，可以简单直接挂到exports对象上(2) 对于类，为了直接使导出的内容作为类的构造器可以让调用者使用new操作符创建实例对象,    应该把构造函数挂到module.exports对象上，不要和导出属性值混在一起。</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
